<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:models="clr-namespace:Clipboard.Models;assembly=Clipboard"
                    xmlns:controls="http://metro.mahapps.com/winfx/xaml/controls"
                    xmlns:models1="clr-namespace:Events.Models;assembly=Events">

  <!-- Colors -->
  <Color x:Key="MainColor">#FF4E5CA9</Color>
  <Color x:Key="NotificationBackground">#4E5CA9</Color>

  <!-- Brushes -->
  <SolidColorBrush x:Key="WindowTitleColorBrush" Color="{StaticResource MainColor}" />
  <SolidColorBrush x:Key="MainColoBrush" Color="{StaticResource MainColor}" />
  <SolidColorBrush x:Key="NotificationBackgroundBrush" Color="{StaticResource NotificationBackground}" />
  <SolidColorBrush x:Key="LightTextForegroundBrush" Color="{StaticResource WhiteColor}" />
  <SolidColorBrush x:Key="DarkTextForegroundBrush" Color="{StaticResource BlackColor}" />

  <VisualBrush x:Key="CloudVisualBrush" Stretch="Uniform" Visual="{DynamicResource appbar_cloud}" />
  <VisualBrush x:Key="LocalVisualBrush" Stretch="Uniform" Visual="{DynamicResource appbar_laptop}" />
  <VisualBrush x:Key="EnvelopeVisualBrush" Stretch="Uniform" Visual="{DynamicResource appbar_email_minimal}" />
  <VisualBrush x:Key="CallVisualBrush" Stretch="Uniform" Visual="{DynamicResource appbar_phone}" />

  <!-- TextBlock -->
  <Style TargetType="TextBlock" x:Key="TextBlock" BasedOn="{StaticResource {x:Type TextBlock}}">
    <Setter Property="FontFamily" Value="Arial" />
    <Setter Property="TextOptions.TextFormattingMode" Value="Display"/>
    <Setter Property="TextOptions.TextRenderingMode" Value="ClearType"/>
    <Setter Property="TextWrapping" Value="Wrap" />
    <Setter Property="TextTrimming" Value="CharacterEllipsis" />
  </Style>

  <Style TargetType="TextBlock" x:Key="LightTextBlock" BasedOn="{StaticResource {x:Type TextBlock}}">
    <Setter Property="Foreground" Value="{StaticResource LightTextForegroundBrush}" />
  </Style>

  <Style TargetType="TextBlock" x:Key="DarkTextBlock" BasedOn="{StaticResource {x:Type TextBlock}}">
    <Setter Property="Foreground" Value="{StaticResource DarkTextForegroundBrush}" />
  </Style>

  <Style TargetType="TextBlock" x:Key="BoldTextBlock" BasedOn="{StaticResource DarkTextBlock}">
    <Setter Property="FontSize" Value="14" />
    <Setter Property="FontWeight" Value="Bold" />
    <Setter Property="Margin" Value="0, 0, 14, 0" />
  </Style>

  <Style TargetType="TextBlock" x:Key="LightTitleTextBlock" BasedOn="{StaticResource LightTextBlock}">
    <Setter Property="FontSize" Value="14" />
    <Setter Property="FontWeight" Value="Bold" />
    <Setter Property="VerticalAlignment" Value="Center" />
  </Style>

  <Style TargetType="TextBlock" x:Key="ClippingTextBlock" BasedOn="{StaticResource DarkTextBlock}">
    <Setter Property="HorizontalAlignment" Value="Stretch" />
    <Setter Property="VerticalAlignment" Value="Center" />
  </Style>

  <!-- Label -->
  <Style x:Key="HeaderStyle" TargetType="Label">
    <Setter Property="HorizontalAlignment" Value="Center" />
  </Style>

  <Style x:Key="DescriptionHeaderStyle" BasedOn="{StaticResource HeaderStyle}" TargetType="Label">
    <Setter Property="FontSize" Value="22" />
  </Style>

  <!-- Button -->
  <Style x:Key="DialogButton" TargetType="Button" BasedOn="{StaticResource {x:Type Button}}">
    <Setter Property="Margin" Value="10" />
  </Style>

  <Style x:Key="PrimaryDialogButton" TargetType="Button" BasedOn="{StaticResource AccentedSquareButtonStyle}">
    <Setter Property="Margin" Value="10" />
    <Setter Property="HorizontalAlignment" Value="Right" />
    <Setter Property="VerticalAlignment" Value="Center" />
    <Setter Property="IsDefault" Value="True" />
  </Style>

  <Style x:Key="SmartActionButton" TargetType="Button" BasedOn="{StaticResource MetroCircleButtonStyle}">
    <Setter Property="Visibility" Value="Hidden" />
    <Setter Property="Width" Value="50" />
    <Setter Property="Height" Value="50" />
    <Setter Property="Margin" Value="6" />
    <Setter Property="VerticalAlignment" Value="Center" />
    <Setter Property="Background" Value="Transparent" />
    <Style.Triggers>
      <DataTrigger Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Grid}}, Path=IsMouseOver}" Value="True">
          <Setter Property="Visibility" Value="Visible" />
      </DataTrigger>
    </Style.Triggers>
  </Style>
    
    <Style x:Key="ClippingSmartActionButton" TargetType="Button" BasedOn="{StaticResource SmartActionButton}">
        <Style.Triggers>
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Grid}}, Path=IsMouseOver}" Value="True">
                <Setter Property="Visibility" Value="{Binding Path=Model.IsLink, Converter={StaticResource BooleanToVisibility}}" />
            </DataTrigger>
        </Style.Triggers>
    </Style>

  <!-- Shapes -->
  <Style x:Key="ItemIcon" TargetType="Rectangle">
    <Setter Property="Margin" Value="14, 0" />
    <Setter Property="Height" Value="38" />
    <Setter Property="Width" Value="38" />
    <Setter Property="VerticalAlignment" Value="Center" />
    <Setter Property="HorizontalAlignment" Value="Center" />
    <Setter Property="Fill" Value="{StaticResource GrayBrush2}" />
  </Style>

  <Style x:Key="ClippingSourceIconStyle" TargetType="Rectangle" BasedOn="{StaticResource ItemIcon}">
    <Style.Triggers>
      <DataTrigger Binding="{Binding Path=Source}" Value="{x:Static models:Clipping+ClippingSourceEnum.Local}">
        <Setter Property="OpacityMask" Value="{DynamicResource LocalVisualBrush}"/>
      </DataTrigger>
      <DataTrigger Binding="{Binding Path=Source}" Value="{x:Static models:Clipping+ClippingSourceEnum.Cloud}">
        <Setter Property="OpacityMask" Value="{DynamicResource CloudVisualBrush}"/>
      </DataTrigger>
    </Style.Triggers>
  </Style>

  <Style x:Key="EventTypeIconStyle" TargetType="Rectangle" BasedOn="{StaticResource ItemIcon}">
    <Style.Triggers>
      <DataTrigger Binding="{Binding Path=Type}" Value="{x:Static models1:EventTypeEnum.IncomingCallEvent}">
        <Setter Property="OpacityMask" Value="{DynamicResource CallVisualBrush}"/>
      </DataTrigger>
      <DataTrigger Binding="{Binding Path=Type}" Value="{x:Static models1:EventTypeEnum.IncomingSmsEvent}">
        <Setter Property="OpacityMask" Value="{DynamicResource EnvelopeVisualBrush}"/>
      </DataTrigger>
    </Style.Triggers>
  </Style>

  <!--SubMenu-->
  <Style x:Key="SubmenuTabItemStyle" TargetType="controls:MetroTabItem">
    <Setter Property="controls:ControlsHelper.HeaderFontSize" Value="18"></Setter>
  </Style>

  <!--TextBox-->
  <Style x:Key="SpacedTextBoxStyle" BasedOn="{StaticResource {x:Type TextBox}}" TargetType="TextBox">
    <Setter Property="Margin" Value="10" />
  </Style>

  <!--StackPanel-->
  <Style x:Key="HorizontalPanel" TargetType="StackPanel">
    <Setter Property="Orientation" Value="Horizontal"/>
    <Setter Property="VerticalAlignment" Value="Center" />
  </Style>

  <Style x:Key="ButtonsPanel" TargetType="StackPanel" BasedOn="{StaticResource HorizontalPanel}">
    <Setter Property="HorizontalAlignment" Value="Right" />
  </Style>

  <Style x:Key="VerticalStackPanel" TargetType="StackPanel">
    <Setter Property="Orientation" Value="Vertical"/>
    <Setter Property="VerticalAlignment" Value="Center" />
  </Style>
</ResourceDictionary>