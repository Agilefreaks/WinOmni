<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:models="clr-namespace:Clipboard.Models;assembly=Clipboard"
                    xmlns:controls="http://metro.mahapps.com/winfx/xaml/controls"
                    xmlns:models1="clr-namespace:Events.Models;assembly=Events">

    <!-- Colors -->
    <Color x:Key="MainColor">#FF4E5CA9</Color>
    <Color x:Key="NotificationBackground">#4E5CA9</Color>

    <!-- Brushes -->
    <SolidColorBrush x:Key="WindowTitleColorBrush" Color="{StaticResource MainColor}" />
    <SolidColorBrush x:Key="MainColoBrush" Color="{StaticResource MainColor}" />
    <SolidColorBrush x:Key="NotificationBackgroundBrush" Color="{StaticResource NotificationBackground}" />
    <SolidColorBrush x:Key="LightTextForegroundBrush" Color="{StaticResource WhiteColor}" />
    <SolidColorBrush x:Key="DarkTextForegroundBrush" Color="{StaticResource BlackColor}" />

    <VisualBrush x:Key="CloudVisualBrush" Stretch="Uniform" Visual="{DynamicResource appbar_cloud}" />
    <VisualBrush x:Key="LocalVisualBrush" Stretch="Uniform" Visual="{DynamicResource appbar_laptop}" />
    <VisualBrush x:Key="EnvelopeVisualBrush" Stretch="Uniform" Visual="{DynamicResource appbar_email_minimal}" />
    <VisualBrush x:Key="CallVisualBrush" Stretch="Uniform" Visual="{DynamicResource appbar_phone}" />

    <!-- TextBlock -->
    <Style TargetType="TextBlock" x:Key="TextBlock" BasedOn="{StaticResource {x:Type TextBlock}}">
        <Setter Property="FontFamily" Value="Arial" />
        <Setter Property="TextOptions.TextFormattingMode" Value="Display"/>
        <Setter Property="TextOptions.TextRenderingMode" Value="ClearType"/>
        <Setter Property="TextWrapping" Value="Wrap" />
        <Setter Property="TextTrimming" Value="CharacterEllipsis" />
    </Style>

    <Style TargetType="TextBlock" x:Key="LightTextBlock" BasedOn="{StaticResource {x:Type TextBlock}}">
        <Setter Property="Foreground" Value="{StaticResource LightTextForegroundBrush}" />
    </Style>

    <Style TargetType="TextBlock" x:Key="DarkTextBlock" BasedOn="{StaticResource {x:Type TextBlock}}">
        <Setter Property="Foreground" Value="{StaticResource DarkTextForegroundBrush}" />
    </Style>

    <Style TargetType="TextBlock" x:Key="BoldTextBlock" BasedOn="{StaticResource DarkTextBlock}">
        <Setter Property="FontSize" Value="14" />
        <Setter Property="FontWeight" Value="Bold" />
        <Setter Property="Margin" Value="0, 0, 14, 0" />
    </Style>

    <Style TargetType="TextBlock" x:Key="LightTitleTextBlock" BasedOn="{StaticResource LightTextBlock}">
        <Setter Property="FontSize" Value="14" />
        <Setter Property="FontWeight" Value="Bold" />
        <Setter Property="VerticalAlignment" Value="Center" />
    </Style>

    <Style TargetType="TextBlock" x:Key="ClippingTextBlock" BasedOn="{StaticResource DarkTextBlock}">
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="VerticalAlignment" Value="Center" />
    </Style>

    <Style TargetType="TextBlock" x:Key="InfoTextStyle">
        <Setter Property="FontFamily" Value="{StaticResource HeaderFontFamily}" />
        <Setter Property="FontSize" Value="{StaticResource SubHeaderFontSize}" />
        <Setter Property="Foreground" Value="{StaticResource GrayNormalBrush}"></Setter>
    </Style>

    <Style TargetType="TextBlock" x:Key="InfoTextStyleCenter" BasedOn="{StaticResource InfoTextStyle}">
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="HorizontalAlignment" Value="Center" />
    </Style>

    <Style x:Key="DescriptionHeaderStyleTextBlock" TargetType="TextBlock">
        <Setter Property="FontSize" Value="22" />
        <Setter Property="HorizontalAlignment" Value="Center"></Setter>
        <Setter Property="TextWrapping" Value="WrapWithOverflow"></Setter>
    </Style>

    <!-- Label -->
    <Style x:Key="HeaderStyle" TargetType="Label">
        <Setter Property="HorizontalAlignment" Value="Center" />
    </Style>

    <Style x:Key="DescriptionHeaderStyle" BasedOn="{StaticResource HeaderStyle}" TargetType="Label">
        <Setter Property="FontSize" Value="22" />
    </Style>

    <!-- Button -->
    <Style x:Key="DialogButton" TargetType="Button" BasedOn="{StaticResource {x:Type Button}}">
        <Setter Property="Margin" Value="10" />
    </Style>

    <Style x:Key="PrimaryDialogButton" TargetType="Button" BasedOn="{StaticResource AccentedSquareButtonStyle}">
        <Setter Property="Margin" Value="10" />
        <Setter Property="HorizontalAlignment" Value="Right" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="IsDefault" Value="True" />
    </Style>

    <Style x:Key="SmartActionButton" TargetType="Button" BasedOn="{StaticResource MetroCircleButtonStyle}">
        <Setter Property="Visibility" Value="Hidden" />
        <Setter Property="Width" Value="50" />
        <Setter Property="Height" Value="50" />
        <Setter Property="Margin" Value="6" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="Background" Value="Transparent" />
        <Style.Triggers>
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Grid}}, Path=IsMouseOver}" Value="True">
                <Setter Property="Visibility" Value="Visible" />
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="ClippingSmartActionButton" TargetType="Button" BasedOn="{StaticResource SmartActionButton}">
        <Style.Triggers>
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Grid}}, Path=IsMouseOver}" Value="True">
                <Setter Property="Visibility" Value="{Binding Path=Model.IsLink, Converter={StaticResource BooleanToVisibility}}" />
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <!-- Shapes -->
    <Style x:Key="ItemIcon" TargetType="Rectangle">
        <Setter Property="Margin" Value="14, 0" />
        <Setter Property="Height" Value="38" />
        <Setter Property="Width" Value="38" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="Fill" Value="{StaticResource GrayBrush2}" />
    </Style>

    <Style x:Key="ClippingSourceIconStyle" TargetType="Rectangle" BasedOn="{StaticResource ItemIcon}">
        <Style.Triggers>
            <DataTrigger Binding="{Binding Path=Source}" Value="{x:Static models:Clipping+ClippingSourceEnum.Local}">
                <Setter Property="OpacityMask" Value="{DynamicResource LocalVisualBrush}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=Source}" Value="{x:Static models:Clipping+ClippingSourceEnum.Cloud}">
                <Setter Property="OpacityMask" Value="{DynamicResource CloudVisualBrush}"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="EventTypeIconStyle" TargetType="Rectangle" BasedOn="{StaticResource ItemIcon}">
        <Style.Triggers>
            <DataTrigger Binding="{Binding Path=Type}" Value="{x:Static models1:EventTypeEnum.IncomingCallEvent}">
                <Setter Property="OpacityMask" Value="{DynamicResource CallVisualBrush}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=Type}" Value="{x:Static models1:EventTypeEnum.IncomingSmsEvent}">
                <Setter Property="OpacityMask" Value="{DynamicResource EnvelopeVisualBrush}"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>
    
    <Style x:Key="EmptyListIconStyle" TargetType="Rectangle">
        <Setter Property="Width" Value="100" />
        <Setter Property="Height" Value="100" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="Fill" Value="{StaticResource GrayNormalBrush}" />
        <Setter Property="OpacityMask">
            <Setter.Value>
                <VisualBrush Stretch="Uniform" Visual="{StaticResource appbar_smiley_glasses}" />
            </Setter.Value>
        </Setter>
    </Style>

    <!--SubMenu-->
    <Style x:Key="SubmenuTabItemStyle" TargetType="controls:MetroTabItem">
        <Setter Property="controls:ControlsHelper.HeaderFontSize" Value="18"></Setter>
    </Style>

    <!--TextBox-->
    <Style x:Key="SpacedTextBoxStyle" BasedOn="{StaticResource {x:Type TextBox}}" TargetType="TextBox">
        <Setter Property="Margin" Value="10" />
    </Style>

    <!--StackPanel-->
    <Style x:Key="HorizontalPanel" TargetType="StackPanel">
        <Setter Property="Orientation" Value="Horizontal"/>
        <Setter Property="VerticalAlignment" Value="Center" />
    </Style>

    <Style x:Key="VerticalPanel" TargetType="StackPanel">
        <Setter Property="Orientation" Value="Vertical"/>
        <Setter Property="VerticalAlignment" Value="Center" />
    </Style>
    
    <Style x:Key="ButtonsPanel" TargetType="StackPanel" BasedOn="{StaticResource HorizontalPanel}">
        <Setter Property="HorizontalAlignment" Value="Right" />
    </Style>
    
    <!--Grid-->
    <Style x:Key="ListItem" TargetType="Grid">
        <Setter Property="Height" Value="62"></Setter>
    </Style>

    <!--PasswordBox-->
    <Style x:Key="SpacedPasswordBoxStyle" BasedOn="{StaticResource {x:Type PasswordBox}}" TargetType="PasswordBox">
        <Setter Property="Margin" Value="10" />
    </Style>

    <!--NumericUpDown-->
    <Style TargetType="{x:Type controls:NumericUpDown}">
        <Setter Property="BorderThickness"
                Value="1" />
        <Setter Property="SnapsToDevicePixels"
                Value="true" />
        <Setter Property="Foreground"
                Value="{DynamicResource TextBrush}" />
        <Setter Property="BorderBrush"
                Value="{DynamicResource TextBoxBorderBrush}" />
        <Setter Property="controls:TextboxHelper.FocusBorderBrush"
                Value="{DynamicResource TextBoxFocusBorderBrush}" />
        <Setter Property="controls:TextboxHelper.MouseOverBorderBrush"
                Value="{DynamicResource TextBoxMouseOverBorderBrush}" />
        <Setter Property="VerticalAlignment"
                Value="Center" />
        <Setter Property="FontFamily"
                Value="{DynamicResource ContentFontFamily}" />
        <Setter Property="FontSize"
                Value="{DynamicResource ContentFontSize}" />
        <Setter Property="controls:TextboxHelper.IsMonitoring"
                Value="True" />
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility"
                Value="Auto" />
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility"
                Value="Auto" />
        <Setter Property="MinHeight"
                Value="26" />
        <Setter Property="MinWidth"
                Value="62" />
        <Setter Property="Background"
                Value="{DynamicResource ControlBackgroundBrush}" />
        <Setter Property="Validation.ErrorTemplate"
                Value="{DynamicResource ValidationErrorTemplate}" />
        <Setter Property="Focusable"
                Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type controls:NumericUpDown}">
                    <Grid Height="{TemplateBinding Height}"
                          MinHeight="{TemplateBinding MinHeight}"
                          MaxHeight="{TemplateBinding MaxHeight}"
                          Margin="{TemplateBinding Padding}"
                          VerticalAlignment="{TemplateBinding VerticalAlignment}"
                          Background="{TemplateBinding Background}">
                        <Rectangle x:Name="Base"
                                   Stroke="{TemplateBinding BorderBrush}"
                                   StrokeThickness="{TemplateBinding BorderThickness, Converter={StaticResource ThicknessToDoubleConverter}}"
                                   Fill="{TemplateBinding Background}" />
                        <Rectangle x:Name="FocusRectangle"
                                   Visibility="Collapsed"
                                   StrokeThickness="{TemplateBinding BorderThickness, Converter={StaticResource ThicknessToDoubleConverter}}" />
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition />
                                <ColumnDefinition x:Name="PART_NumericUpColumn"
                                                  Width="20" />
                                <ColumnDefinition x:Name="PART_NumericDownColumn"
                                                  Width="20" />
                            </Grid.ColumnDefinitions>

                            <TextBox x:Name="PART_TextBox"
                                     MinWidth="20"
                                     MinHeight="{TemplateBinding MinHeight}"
                                     Foreground="{TemplateBinding Foreground}"
                                     HorizontalAlignment="Stretch"
                                     HorizontalContentAlignment="Right"
                                     VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                                     SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                     BorderThickness="0"
                                     Background="{x:Null}"
                                     Focusable="True"
                                     HorizontalScrollBarVisibility="{TemplateBinding ScrollViewer.HorizontalScrollBarVisibility}"
                                     VerticalScrollBarVisibility="{TemplateBinding ScrollViewer.VerticalScrollBarVisibility}"
                                     IsReadOnly="{TemplateBinding IsReadOnly}"
                                     FontFamily="{TemplateBinding FontFamily}"
                                     FontSize="{TemplateBinding FontSize}"
                                     controls:TextboxHelper.ClearTextButton="{TemplateBinding controls:TextboxHelper.ClearTextButton}"
                                     controls:TextboxHelper.Watermark="{TemplateBinding controls:TextboxHelper.Watermark}" />
                            <RepeatButton x:Name="PART_NumericUp"
                                          Grid.Column="1"
                                          Margin="2,2,0,2"
                                          Delay="{TemplateBinding Delay}"
                                          Foreground="{TemplateBinding Foreground}"
                                          Style="{DynamicResource ChromelessButtonStyle}"
                                          IsTabStop="False">
                                <Path x:Name="PolygonUp"
                                      Width="14"
                                      Height="14"
                                      Stretch="Fill"
                                      Fill="{DynamicResource GrayBrush1}"
                                      Data="F1 M 35,19L 41,19L 41,35L 57,35L 57,41L 41,41L 41,57L 35,57L 35,41L 19,41L 19,35L 35,35L 35,19 Z " />
                            </RepeatButton>
                            <RepeatButton x:Name="PART_NumericDown"
                                          Grid.Column="2"
                                          Margin="0,2,2,2"
                                          VerticalContentAlignment="Center"
                                          Delay="{TemplateBinding Delay}"
                                          Style="{DynamicResource ChromelessButtonStyle}"
                                          Foreground="{TemplateBinding Foreground}"
                                          IsTabStop="False">
                                <Path x:Name="PolygonDown"
                                      Width="14"
                                      Height="3"
                                      Stretch="Fill"
                                      Fill="{DynamicResource GrayBrush1}"
                                      Data="F1 M 19,38L 57,38L 57,44L 19,44L 19,38 Z " />
                            </RepeatButton>
                        </Grid>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsReadOnly"
                                 Value="True">
                            <Setter Property="InterceptArrowKeys"
                                    Value="False" />
                            <Setter Property="InterceptMouseWheel"
                                    Value="False" />
                            <Setter Property="InterceptManualEnter"
                                    Value="False" />
                        </Trigger>
                        <Trigger Property="IsMouseOver"
                                 Value="True"
                                 SourceName="PART_NumericUp">
                            <Setter TargetName="PART_NumericUp"
                                    Property="Background"
                                    Value="{DynamicResource GrayBrush8}" />
                            <Setter TargetName="PolygonUp"
                                    Property="Fill"
                                    Value="{DynamicResource AccentColorBrush}" />
                        </Trigger>
                        <Trigger Property="IsPressed"
                                 Value="True"
                                 SourceName="PART_NumericUp">
                            <Setter TargetName="PART_NumericUp"
                                    Property="Background"
                                    Value="{DynamicResource BlackBrush}" />
                            <Setter TargetName="PolygonUp"
                                    Property="Fill"
                                    Value="{DynamicResource WhiteBrush}" />
                        </Trigger>
                        <Trigger Property="IsMouseOver"
                                 Value="True"
                                 SourceName="PART_NumericDown">
                            <Setter TargetName="PART_NumericDown"
                                    Property="Background"
                                    Value="{DynamicResource GrayBrush8}" />
                            <Setter TargetName="PolygonDown"
                                    Property="Fill"
                                    Value="{DynamicResource AccentColorBrush}" />
                        </Trigger>
                        <Trigger Property="IsPressed"
                                 Value="True"
                                 SourceName="PART_NumericDown">
                            <Setter TargetName="PART_NumericDown"
                                    Property="Background"
                                    Value="{DynamicResource BlackBrush}" />
                            <Setter TargetName="PolygonDown"
                                    Property="Fill"
                                    Value="{DynamicResource WhiteBrush}" />
                        </Trigger>
                        <Trigger Property="IsMouseOver"
                                 Value="true">
                            <Setter TargetName="FocusRectangle"
                                    Property="Visibility"
                                    Value="Visible" />
                            <Setter TargetName="FocusRectangle"
                                    Property="Stroke"
                                    Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(controls:TextboxHelper.MouseOverBorderBrush)}" />
                        </Trigger>
                        <Trigger Property="IsFocused"
                                 Value="true"
                                 SourceName="PART_TextBox">
                            <Setter TargetName="FocusRectangle"
                                    Property="Visibility"
                                    Value="Visible" />
                            <Setter TargetName="FocusRectangle"
                                    Property="Stroke"
                                    Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(controls:TextboxHelper.FocusBorderBrush)}" />
                        </Trigger>
                        <Trigger Property="IsFocused"
                                 Value="true">
                            <Setter TargetName="FocusRectangle"
                                    Property="Visibility"
                                    Value="Visible" />
                            <Setter TargetName="FocusRectangle"
                                    Property="Stroke"
                                    Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(controls:TextboxHelper.FocusBorderBrush)}" />
                        </Trigger>

                        <Trigger Property="HideUpDownButtons"
                                 Value="True">
                            <Setter TargetName="PART_NumericUp"
                                    Property="Visibility"
                                    Value="Collapsed" />
                            <Setter TargetName="PART_NumericDown"
                                    Property="Visibility"
                                    Value="Collapsed" />
                            <Setter TargetName="PART_NumericUpColumn"
                                    Property="Width"
                                    Value="0" />
                            <Setter TargetName="PART_NumericDownColumn"
                                    Property="Width"
                                    Value="0" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="SpacedNumericUpDownStyle" BasedOn="{StaticResource {x:Type controls:NumericUpDown}}" TargetType="controls:NumericUpDown">
        <Setter Property="Margin" Value="10" />
    </Style>
    
    <!--ComboBox-->
    <Style x:Key="SpacedComboBoxStyle" BasedOn="{StaticResource {x:Type ComboBox}}" TargetType="ComboBox">
        <Setter Property="Margin" Value="10" />
    </Style>
</ResourceDictionary>