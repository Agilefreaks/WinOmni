<controls:MetroWindow x:Class="Omnipaste.Shell.ShellView"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:cal="http://www.caliburnproject.org"
        xmlns:controls="http://metro.mahapps.com/winfx/xaml/controls"
        WindowStartupLocation="CenterScreen"
        ResizeMode="NoResize"
        WindowStyle="SingleBorderWindow"
        BorderThickness="1"
        BorderBrush="{StaticResource MainColoBrush}"
        NonActiveBorderBrush="{StaticResource BlackBrush}"
        Icon="/Icon.ico">
    <controls:MetroWindow.Resources>
        <ResourceDictionary>
            <ControlTemplate x:Key="FlyoutTemplate" TargetType="{x:Type controls:Flyout}">
                <Grid x:Name="root"
          Margin="{TemplateBinding Margin}"
          Background="{TemplateBinding Background}">
                    <Grid.RenderTransform>
                        <TranslateTransform />
                    </Grid.RenderTransform>
                    <VisualStateManager.VisualStateGroups>
                        <VisualStateGroup>
                            <VisualState x:Name="Default" />
                            <VisualState x:Name="Hide">
                                <Storyboard>
                                    <DoubleAnimationUsingKeyFrames BeginTime="00:00:00"
                                             Storyboard.TargetProperty="(UIElement.RenderTransform).(TranslateTransform.X)"
                                             Storyboard.TargetName="root">
                                        <EasingDoubleKeyFrame KeyTime="00:00:00.400"
                                      Value="0"
                                      x:Name="hideFrame">
                                            <EasingDoubleKeyFrame.EasingFunction>
                                                <CubicEase EasingMode="EaseOut" />
                                            </EasingDoubleKeyFrame.EasingFunction>
                                        </EasingDoubleKeyFrame>
                                    </DoubleAnimationUsingKeyFrames>
                                    <DoubleAnimationUsingKeyFrames BeginTime="00:00:00"
                                             Storyboard.TargetProperty="(UIElement.RenderTransform).(TranslateTransform.Y)"
                                             Storyboard.TargetName="root">
                                        <EasingDoubleKeyFrame KeyTime="00:00:00.500"
                                      Value="0"
                                      x:Name="hideFrameY">
                                            <EasingDoubleKeyFrame.EasingFunction>
                                                <CubicEase EasingMode="EaseOut" />
                                            </EasingDoubleKeyFrame.EasingFunction>
                                        </EasingDoubleKeyFrame>
                                    </DoubleAnimationUsingKeyFrames>
                                    <DoubleAnimation From="1"
                               To="0"
                               BeginTime="00:00:00"
                               Duration="00:00:00.400"
                               Storyboard.TargetProperty="(UIElement.Opacity)"
                               Storyboard.TargetName="root" />
                                </Storyboard>
                            </VisualState>
                            <VisualState x:Name="Show">
                                <Storyboard>
                                    <DoubleAnimationUsingKeyFrames BeginTime="00:00:00"
                                             Storyboard.TargetProperty="(UIElement.RenderTransform).(TranslateTransform.X)"
                                             Storyboard.TargetName="root">
                                        <EasingDoubleKeyFrame KeyTime="00:00:00.400"
                                      Value="0"
                                      x:Name="showFrame">
                                            <EasingDoubleKeyFrame.EasingFunction>
                                                <CubicEase EasingMode="EaseOut" />
                                            </EasingDoubleKeyFrame.EasingFunction>
                                        </EasingDoubleKeyFrame>
                                    </DoubleAnimationUsingKeyFrames>
                                    <DoubleAnimationUsingKeyFrames BeginTime="00:00:00"
                                             Storyboard.TargetProperty="(UIElement.RenderTransform).(TranslateTransform.Y)"
                                             Storyboard.TargetName="root">
                                        <EasingDoubleKeyFrame KeyTime="00:00:00.600"
                                      Value="0"
                                      x:Name="showFrameY">
                                            <EasingDoubleKeyFrame.EasingFunction>
                                                <CubicEase EasingMode="EaseOut" />
                                            </EasingDoubleKeyFrame.EasingFunction>
                                        </EasingDoubleKeyFrame>
                                    </DoubleAnimationUsingKeyFrames>
                                    <DoubleAnimation From="0"
                               To="1"
                               BeginTime="00:00:00"
                               Duration="00:00:00.400"
                               Storyboard.TargetProperty="(UIElement.Opacity)"
                               Storyboard.TargetName="root" />
                                </Storyboard>
                            </VisualState>
                        </VisualStateGroup>
                    </VisualStateManager.VisualStateGroups>
                    <DockPanel>
                        <ContentPresenter x:Name="PART_Header"
                          DockPanel.Dock="Top"
                          ContentSource="Header"
                          ContentTemplate="{TemplateBinding HeaderTemplate}" />

                        <ContentControl x:Name="PART_Content" cal:View.Model="{Binding}" DockPanel.Dock="Bottom" />
                    </DockPanel>
                </Grid>
                <ControlTemplate.Triggers>
                    <DataTrigger Binding="{Binding Position, RelativeSource={RelativeSource Self}}" Value="Top">
                        <Setter TargetName="PART_Header"
                Property="DockPanel.Dock"
                Value="Left" />
                        <Setter TargetName="PART_Content"
                Property="DockPanel.Dock"
                Value="Right" />
                    </DataTrigger>
                    <DataTrigger Binding="{Binding Position, RelativeSource={RelativeSource Self}}" Value="Bottom">
                        <Setter TargetName="PART_Header"
                Property="DockPanel.Dock"
                Value="Left" />
                        <Setter TargetName="PART_Content"
                Property="DockPanel.Dock"
                Value="Right" />
                    </DataTrigger>
                </ControlTemplate.Triggers>
            </ControlTemplate>
            <ControlTemplate TargetType="controls:WindowCommands" x:Key="WindowCommandsTemplate">
                    <ControlTemplate.Resources>
                        <ResourceDictionary>
                            <Style TargetType="{x:Type Button}">
                                <Setter Property="Foreground" 
                                        Value="{DynamicResource IdealForegroundColorBrush}"/>
                                <Setter Property="Background"
                                        Value="{DynamicResource TransparentWhiteBrush}" />
                                <Setter Property="HorizontalContentAlignment"
                                        Value="Center" />
                                <Setter Property="VerticalContentAlignment"
                                        Value="Center" />
                                <Setter Property="Padding"
                                        Value="1" />
                                <Setter Property="Focusable"
                                        Value="False" />
                                <Setter Property="FocusVisualStyle"
                                        Value="{x:Null}" />
                                <Setter Property="Template">
                                    <Setter.Value>
                                        <ControlTemplate TargetType="{x:Type Button}">
                                            <Grid Background="{TemplateBinding Background}">
                                                <ContentPresenter x:Name="contentPresenter"
                                                                  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                                  VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                                                  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                                                  RecognizesAccessKey="True"
                                                                  Opacity="0.75"
                                                                  Margin="9,1,9,1" />

                                                <Rectangle x:Name="border"
                                                           SnapsToDevicePixels="True"
                                                           IsHitTestVisible="False"
                                                           Opacity="0.25"
                                                           Width="1"
                                                           Height="15"
                                                           VerticalAlignment="Stretch"
                                                           HorizontalAlignment="Right"
                                                           Fill="{TemplateBinding Foreground}"
                                                           Margin="8,0,0,0" />
                                            </Grid>
                                            <ControlTemplate.Triggers>
                                                <Trigger Property="IsMouseOver"
                                                         Value="True">
                                                    <Setter TargetName="contentPresenter"
                                                            Property="Opacity"
                                                            Value="1" />
                                                </Trigger>
                                                <Trigger Property="IsMouseOver"
                                                         Value="False">
                                                    <Setter TargetName="contentPresenter"
                                                            Property="Opacity"
                                                            Value=".5" />
                                                </Trigger>
                                                <Trigger Property="IsEnabled"
                                                         Value="false">
                                                    <Setter Property="Foreground"
                                                            Value="{DynamicResource IdealForegroundColorBrush}" />
                                                </Trigger>
                                            </ControlTemplate.Triggers>
                                        </ControlTemplate>
                                    </Setter.Value>
                                </Setter>
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding ShowTitleBar, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type controls:MetroWindow}}}"
                                                 Value="True">
                                        <Setter Property="Foreground"
                                                Value="{DynamicResource IdealForegroundColorBrush}" />
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                            <Style TargetType="{x:Type ToggleButton}">
                                <!--Modified version of spiritdead's code-->
                                <Setter Property="Background"
                                        Value="{DynamicResource TransparentWhiteBrush}" />
                                <Setter Property="HorizontalContentAlignment"
                                        Value="Center" />
                                <Setter Property="VerticalContentAlignment"
                                        Value="Center" />
                                <Setter Property="Padding"
                                        Value="1" />
                                <Setter Property="Focusable"
                                        Value="False" />
                                <Setter Property="FocusVisualStyle"
                                        Value="{x:Null}" />
                                <Setter Property="Template">
                                    <Setter.Value>
                                        <ControlTemplate TargetType="{x:Type ToggleButton}">
                                            <Grid Background="{TemplateBinding Background}">
                                                <ContentPresenter x:Name="contentPresenter"
                                                                  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                                  VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                                                  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                                                  RecognizesAccessKey="True"
                                                                  Opacity=".5"
                                                                  Margin="9,1,9,1" />

                                                <Rectangle x:Name="border"
                                                           SnapsToDevicePixels="True"
                                                           IsHitTestVisible="False"
                                                           Opacity=".2"
                                                           Width="1"
                                                           Height="15"
                                                           VerticalAlignment="Stretch"
                                                           HorizontalAlignment="Right"
                                                           Fill="{TemplateBinding Foreground}"
                                                           Margin="8,0,0,0" />
                                            </Grid>
                                            <ControlTemplate.Triggers>
                                                <Trigger Property="IsMouseOver"
                                                         Value="True">
                                                    <Setter TargetName="contentPresenter"
                                                            Property="Opacity"
                                                            Value="1" />
                                                </Trigger>
                                                <Trigger Property="IsChecked"
                                                         Value="true">
                                                    <Setter TargetName="contentPresenter"
                                                            Property="Opacity"
                                                            Value="1" />
                                                </Trigger>
                                                <Trigger Property="IsEnabled"
                                                         Value="false">
                                                    <Setter Property="Foreground"
                                                            Value="#ADADAD" />
                                                </Trigger>
                                                <DataTrigger Binding="{Binding ShowTitleBar, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type controls:MetroWindow}}}"
                                                             Value="True">
                                                    <Setter Property="Foreground"
                                                            Value="{DynamicResource IdealForegroundColorBrush}" />
                                                </DataTrigger>
                                            </ControlTemplate.Triggers>
                                        </ControlTemplate>
                                    </Setter.Value>
                                </Setter>
                            </Style>
                        </ResourceDictionary>
                    </ControlTemplate.Resources>

                    <ItemsControl IsTabStop="False"
                                  Height="{Binding TitlebarHeight, RelativeSource={RelativeSource AncestorType=controls:MetroWindow}}"
                                  ItemsSource="{Binding Items, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type controls:WindowCommands}}}"
                                  ItemTemplate="{TemplateBinding ItemTemplate}">
                        <ItemsControl.ItemsPanel>
                            <ItemsPanelTemplate>
                                <StackPanel Orientation="Horizontal" />
                            </ItemsPanelTemplate>
                        </ItemsControl.ItemsPanel>
                    </ItemsControl>
             </ControlTemplate>
        </ResourceDictionary>
    </controls:MetroWindow.Resources>
    <controls:MetroWindow.Flyouts>
        <controls:FlyoutsControl ItemsSource="{Binding Path=Flyouts}">
            <controls:FlyoutsControl.ItemContainerStyle>
                <Style BasedOn="{StaticResource {x:Type controls:Flyout}}" TargetType="{x:Type controls:Flyout}">
                    <Setter Property="Header" Value="{Binding Header}" />
                    <Setter Property="IsOpen" Value="{Binding IsOpen, Mode=TwoWay}" />
                    <Setter Property="Position" Value="{Binding Position}" />
                    <Setter Property="IsModal" Value="{Binding IsModal}" />
                    <Setter Property="Template" Value="{StaticResource FlyoutTemplate}" />
                    <Setter Property="Width" Value="300" />
                </Style>
            </controls:FlyoutsControl.ItemContainerStyle>
        </controls:FlyoutsControl>
    </controls:MetroWindow.Flyouts>
    <controls:MetroWindow.RightWindowCommands>
        <controls:WindowCommands ItemsSource="{Binding Path=HeaderButtonViewModels}" Template="{StaticResource WindowCommandsTemplate}">
            <controls:WindowCommands.ItemTemplate>
                <DataTemplate>
                    <ContentControl cal:View.Model="{Binding}" />
                </DataTemplate>
            </controls:WindowCommands.ItemTemplate>
        </controls:WindowCommands>
    </controls:MetroWindow.RightWindowCommands>
    <Grid>
        <ContentControl x:Name="ContextMenuViewModel" />
        <controls:MetroAnimatedSingleRowTabControl SelectedIndex="{Binding Path=SelectedViewIndex, Mode=TwoWay}">
            <TabItem Header="{Binding Path=ClippingListViewModel.DisplayName}">
                <ContentControl cal:View.Model="{Binding Path=ClippingListViewModel}" />
            </TabItem>
            <TabItem Header="{Binding Path=MasterEventListViewModel.DisplayName}">
                <ContentControl cal:View.Model="{Binding Path=MasterEventListViewModel}" />
            </TabItem>
        </controls:MetroAnimatedSingleRowTabControl>
    </Grid>
</controls:MetroWindow>