﻿using System;
using System.Net.Http;
using System.Collections.Generic;
using System.Linq;
using OmniApi.Models;
using Refit;

/* ******** Hey You! *********
 *
 * This is a generated file, and gets rewritten every time you build the
 * project. If you want to edit it, you need to edit the mustache template
 * in the Refit package */

namespace RefitInternalGenerated
{
    [AttributeUsage (AttributeTargets.Class | AttributeTargets.Struct | AttributeTargets.Enum | AttributeTargets.Constructor | AttributeTargets.Method | AttributeTargets.Property | AttributeTargets.Field | AttributeTargets.Event | AttributeTargets.Interface | AttributeTargets.Delegate)]
    sealed class PreserveAttribute : Attribute
    {
#pragma warning disable 0649
        //
        // Fields
        //
        public bool AllMembers;

        public bool Conditional;
#pragma warning restore 0649
    }
}

namespace OmniApi.Resources.v1
{
    using RefitInternalGenerated;

    [Preserve]
    public partial class AutoGeneratedIDevicesApi : IDevicesApi
    {
        public HttpClient Client { get; protected set; }
        readonly Dictionary<string, Func<HttpClient, object[], object>> methodImpls;

        public AutoGeneratedIDevicesApi(HttpClient client, IRequestBuilder requestBuilder)
        {
            methodImpls = requestBuilder.InterfaceHttpMethods.ToDictionary(k => k, v => requestBuilder.BuildRestResultFuncForMethod(v));
            Client = client;
        }

        public virtual IObservable<Device> Create(Device device,string token)
        {
            var arguments = new object[] { device,token };
            return (IObservable<Device>) methodImpls["Create"](Client, arguments);
        }

        public virtual IObservable<Device> Get(string id,string token)
        {
            var arguments = new object[] { id,token };
            return (IObservable<Device>) methodImpls["Get"](Client, arguments);
        }

        public virtual IObservable<List<Device>> GetAll(string token)
        {
            var arguments = new object[] { token };
            return (IObservable<List<Device>>) methodImpls["GetAll"](Client, arguments);
        }

        public virtual IObservable<EmptyModel> Remove(string id,string accessToken)
        {
            var arguments = new object[] { id,accessToken };
            return (IObservable<EmptyModel>) methodImpls["Remove"](Client, arguments);
        }

        public virtual IObservable<EmptyModel> Patch(string id,object deviceParams,string token,string version)
        {
            var arguments = new object[] { id,deviceParams,token,version };
            return (IObservable<EmptyModel>) methodImpls["Patch"](Client, arguments);
        }

    }
}

namespace OmniApi.Resources.v1
{
    using RefitInternalGenerated;

    [Preserve]
    public partial class AutoGeneratedIOAuth2Api : IOAuth2Api
    {
        public HttpClient Client { get; protected set; }
        readonly Dictionary<string, Func<HttpClient, object[], object>> methodImpls;

        public AutoGeneratedIOAuth2Api(HttpClient client, IRequestBuilder requestBuilder)
        {
            methodImpls = requestBuilder.InterfaceHttpMethods.ToDictionary(k => k, v => requestBuilder.BuildRestResultFuncForMethod(v));
            Client = client;
        }

        public virtual IObservable<Token> Create(AuthorizationRequest request)
        {
            var arguments = new object[] { request };
            return (IObservable<Token>) methodImpls["Create"](Client, arguments);
        }

    }
}

namespace OmniApi.Resources.v1
{
    using RefitInternalGenerated;

    [Preserve]
    public partial class AutoGeneratedISyncApi : ISyncApi
    {
        public HttpClient Client { get; protected set; }
        readonly Dictionary<string, Func<HttpClient, object[], object>> methodImpls;

        public AutoGeneratedISyncApi(HttpClient client, IRequestBuilder requestBuilder)
        {
            methodImpls = requestBuilder.InterfaceHttpMethods.ToDictionary(k => k, v => requestBuilder.BuildRestResultFuncForMethod(v));
            Client = client;
        }

        public virtual IObservable<EmptyModel> Post(Sync syncs,string token)
        {
            var arguments = new object[] { syncs,token };
            return (IObservable<EmptyModel>) methodImpls["Post"](Client, arguments);
        }

    }
}

namespace OmniApi.Resources.v1
{
    using RefitInternalGenerated;

    [Preserve]
    public partial class AutoGeneratedIUsersApi : IUsersApi
    {
        public HttpClient Client { get; protected set; }
        readonly Dictionary<string, Func<HttpClient, object[], object>> methodImpls;

        public AutoGeneratedIUsersApi(HttpClient client, IRequestBuilder requestBuilder)
        {
            methodImpls = requestBuilder.InterfaceHttpMethods.ToDictionary(k => k, v => requestBuilder.BuildRestResultFuncForMethod(v));
            Client = client;
        }

        public virtual IObservable<Models.User> Get(string token)
        {
            var arguments = new object[] { token };
            return (IObservable<Models.User>) methodImpls["Get"](Client, arguments);
        }

    }
}


